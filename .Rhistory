shapiro.test(mydata$CD4)
shapiro.test(mydata$CD8)
shapiro.test(mydata$CD4.CD69)
shapiro.test(mydata$CD8.CD69)
?boxplot()
plot1 = boxplot(mydata$CD4,mydata$CD8, xlab="T cells", ylab="Frequency %", main="T cells Expression", names=c("CD4", "CD8"))
mydata = read.table("Cells.txt", header=TRUE)
mydata
mydata$CD4
mydata$CD8
mydata$CD8.CD69
shapiro.test(mydata$CD4)
shapiro.test(mydata$CD8)
shapiro.test(mydata$CD4.CD69)
shapiro.test(mydata$CD8.CD69)
?boxplot()
plot1 = boxplot(mydata$CD4, mydata$CD8, mydata$CD4.CD69, mydata$CD8.CD69, main = "T Cells Expression", xlab="T Cells", ylab="Frequency(%)", names = c("CD4", "CD8", "CD4.CD69", "CD8.CD69"))
plot1 = boxplot(mydata$CD4, mydata$CD8, mydata$CD4.CD69, mydata$CD8.CD69, main = "T Cells Expression", xlab="T Cells", ylab="Frequency(%)", names = c("CD4", "CD8", "CD4.CD69", "CD8.CD69"))
plot1
mydata = read.table("Cells.txt", header=TRUE)
mydata
mydata$CD4
mydata$CD8
shapiro.test(mydata$CD4)
shapiro.test(mydata$CD8)
shapiro.test(mydata$CD4.CD69)
shapiro.test(mydata$CD8.CD69)
boxplot(mydata$CD4, mydata$CD8, mydata$CD4.CD69, mydata$CD8.CD69, main = "T cells Expression", xlab="T cells", ylab="Frequency(%)", names=c("CD4", "CD8", "CD4/CD69", "CD8/CD69"))
q()
?read.csv
fcsfiles = read.table("Accuri-C6.fcs")
fcsfiles
fcsfiles = read.table("Accuri-C6.fcs", header=TRUE)
read.csv2("Accuri-C6.fcs")
read.csv2("Accuri-C6.fcs", header = TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite("flowViz")
browseVignettes(package = "FlowViz")
source("https://bioconductor.org/biocLite.R")
biocLite("flowViz")
library("abind", lib.loc="~/R/win-library/3.3")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocValid()
biocValid()
bioclite()
source("http://www.bioconductor.org/biocLite.R")
biocLite()
install.packages("~/R/win-library/3.3/flowViz/MD5", repos = NULL)
install.packages("~/R/win-library/3.3/flowViz/R/flowViz", repos = NULL)
install.packages("~/R/win-library/3.3/flowViz/R/flowViz.rdb", repos = NULL)
install.packages("~/R/win-library/3.3/flowViz/R/flowViz.rdx", repos = NULL)
source("http://www.bioconductor.org/biocLite.R")
biocLite("flowViz")
library(flowCore)
library(flowViz)
addNextMethod()
addName()
help("xyplot")
range(1:10)
x = 1:10
x
names(x)=c("a", "b","c")
x
a
x[a]
x[[a]]
x[a]
x[1]
a[-2]
x[-1]
sapply(x, x+2)
sapply(x[1], x[4], x+2)
library(flowCore)
source("http://www.bioconductor.org/biocLite.R")
biocLite(c("Biobase")
)
library(convert)
?flowFrame
matrix1 = matrix(data = 1:9, nrow=3, ncol=3)
matrix1
?flowSet
?system.file()
?flowset
?flowSet()
?flowCore::
?flowCore
?read.FCS
library("flowCore"")
)
))))
library(flowCore)
library(flowCore)
library("flowCore")
library("FlowCore")
library("Biobase")
q()
library(flowCore)
readdd=read.FCS("Sample 1_CEF.fcs")
fcsFile <- system.file("extdata", "0877408774.B08", package="flowCore")
fcsFile
ls
samp <-  read.FCS(fcsFile, transformation="linearize")
file.name <- system.file("extdata","0877408774.B08", package="flowCore")
file.name
x <- read.FCS(file.name, transformation=FALSE)
source("http://www.bioconductor.org/biocLite.R")
biocLite("Biobase")
readdd=read.FCS("Sample 1_CEF.fcs")
library("flowCore")
readdd=read.FCS("Sample 1_CEF.fcs")
readdd
readdd["names"]
readdd["name"]
readdd[name]
summary(readdd)
biocLite("ncdfFlow")
biocLite("ncdfFlow")
biocLite("ggcyto")
biocLite("ggcyto")
biocLite("openCyto")
library("flowCore")
library(flowCore)
library("flowCore")
library('flowViz')
library('ggcyto')
lines = sample(100:500, 50)
lines
frames <- lapply(dir(system.file("extdata", "compdata", "data",
package="flowCore"), full.names=TRUE),
read.FCS)
frames <- lapply(read.FCS)
frames = lapply(dir("C:\Users\ST-AHUNO\Documents\"), read.FCS)
frames = lapply(dir(C:\Users\ST-AHUNO\Documents\), read.FCS)
frames = lapply(dir(C:/Users/ST-AHUNO/Documents/), read.FCS)
getwd()
frames = lapply(dir(C:/Users/ST-AHUNO/Documents), read.FCS)
frames = lapply(dir("C:/Users/ST-AHUNO/Documents"), read.FCS)
as(frames, "flowCore")
read.flowSet(path = C:/Users/ST-AHUNO/Documents)
read.flowSet(path = "C:/Users/ST-AHUNO/Documents")
data(GvHD)
head(pData(GvHD))
?data
data("Sample 1_CEF.fcs")
source("http://www.bioconductor.org/biocLite.R")
biocLite("tclust")
pData("Sample 1_CEF.fcs")
data("Sample 1_CEF.fcs")
data(Sample 1_CEF.fcs)
data(Sample1CEF.fcs)
data("Sample1CEF.fcs")
read.FCS("Sample1CEF.fcs")
data("Sample1CEF.fcs")
summary(Sample1CEF.fcs)
summary(read.FCS((Sample1CEF.fcs)))
summary(read.FCS(("Sample1CEF.fcs")))
read.flowSet(files=c("Sample1CEF.fcs", "Sample 1_CMV.fcs"))
flowsss = read.flowSet(files=c("Sample1CEF.fcs", "Sample 1_CMV.fcs"))
flowsss
phenoData(flowsss)
phenoData(flowsss[name])
phenoData(flowsss[Sample 1_CMV.fcs])
phenoData(flowsss["Sample 1_CMV.fcs"])
?flowCore
library(flowCore)
library(flowViz)
library(ggcyto)
#reading .fcs files from Documents (saved on my computer).
#mind you I'm assigning it to a variable "myfcs"
myfcs = read.FCS("Sample 1_CEF.fcs")
#get a summary of myfcs
summary(myfcs)
#Display the entire "myfcs"
myfcs
#read multiple .fcs files using flowset
myflowset = read.flowSet(files= c("Sample 1_CEF.fcs", "Sample 1_CMV.fcs", "Sample 1_Unstim.fcs"))
#Display phenoData of my flowset (myflowset)
phenoData(myflowset)
#want to subset only Sample 1_CEF.fcs of my flowset
myflowsetsub1 = myflowset["Sample 1_CEF.fcs"]
#perform basic plots using ggcyto
plot1 = autoplot(myfcs, "FSC-A", "FSC-H")
plot1
plot(myfcs, c("SSC-A","FSC-A"))
plot(myfcs, c("FSC-A","FSC-H"))
x = 1:12
x
names(x) = c("kofi", "ama", "c", "c", "f")
x
x[ama]
x["ama"]
x["c"]
anyDuplicated(x)
anyDuplicated(names(x))
?read.flowSet
myfset=read.flowSet(path="D:/David Tabb/Automated Gating -Manuscript-AK&Dabb/20170217 Flow ICS_stim vs unstim-20170915T094625Z-001-New/Set 1")
library("flowSet")
library("flowCore")
library("flowViz")
library("ggcyto")
myfset=read.flowSet(path="D:/David Tabb/Automated Gating -Manuscript-AK&Dabb/20170217 Flow ICS_stim vs unstim-20170915T094625Z-001-New/Set 1")
plot(myfset[[1]]$`<FSC-A> FSC-A`)
plot(myfset[[1]]$FSC-A)
plot(myfset[[1]])
autoplot(myfset, "FSC-A", "SSC-H")
autoplot(myfset[[1]], "FSC-A", "SSC-H")
?autoplot
myfset[[1]]
x = 1000
y = log(5, base=10)
y
?transform
log(2)
log(5)
exp(1.609438)
exp(0.69897)
transform(x)
transform(log(x)
)
log(x)
myfcs
myfcs[[1]]
myfcs[[2]]
autoplot(myfcs)
library("ggcyto")
autoplot(myfcs)
autoplot(myfcs(APC-A IFNg))
autoplot(myfcs("APC-A IFNg""))
""
autoplot(myfcs("APC-A IFNg"))
myfcs(SSC-H)
myfcs("SSC-H")
myfcs[SSC-H]
myfcs["SSC-H]
""
''
0
()
)
"
myfcs["SSC-H"]
myfcs
myfcs['name']
myfcs('name')
myfcs
?truncateTransform
myfcs('SSC-W')
myfcs('$P6')
source("http://www.bioconductor.org/BiocLite.R")
source("http://www.bioconductor.org/BiocLite.R")
source("http://www.bioconductor.org/biocLite.R")
biocLite("opencyto")
?logicleTransform
?estimateLogicle
?as.ggplot
?as.ggplot()
?as.ggplot
??as.ggplot
??getData
q()
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
rnorm?
)
?rnorm
rnorm(50)
x = rnorm(20)
x
hist(x)
y = rnorm(20, mean=13, sd=1)
hist(y)
z = rnorm(20)
trim1d = c(20.43,16.44,14.70,16.84,15.95,23.01,27.01,39.30,11.90,19.47,18.97,16.99,16.81,17.03,16.35,18.96,18.33,18.89,16.63,16.83,15.16,16.72)
trim2d= c(18.44,25.52,23.10,24.03,18.31,18.30,18.90,11.80,13.87,15.60,13.38,15.11,17.18,14.63,13.90,25.00,22.20,23.52,19.62,18.61,19.93,17.40,6.30,18.70,17.20,20.60)
trim3d= c(20.75,26.01,16.50,25.31,25.30,25.52,19.75,15.48,10.84,25.31,13.11,12.45,21.47,18.66,19.47,5.46,18.80,17.29,21.74,5.41,22.61,19.19,18.35,19.04,15.84,15.22,16.32,17.28,9.90,17.61,19.59)
vitD = c(trim1d,trim2d,trim3d)
?kruskal.test
kruskal.test(vitD)
?list
vitD2 = list(t1=trim1d, t2=trim2d, t3=trim3d)
vitD2
kruskal.test(vitD2)
myfcs = read.FCS("Sample 1_CEF.fcs")
library(flowCore)
source("https://bioconductor.org/biocLite.R")
BiocInstaller::biocLite("flowCore")
install.packages("robustbase")
library(haven)
Data_Vit_D_31_12_2017 <- read_sav("~/Publications/1- Drafts/Dr. Amoako Sakyi/Adelaide-Vitamin D-Neonates/Data-Vit D-31.12.2017.sav")
View(Data_Vit_D_31_12_2017)
datt = Data_Vit_D_31_12_2017
datt
type(datt)
type.datt
summary(datt)
library("robustbase")
library(flowCore)
clear
install.packages(robustbase)
install.packages("robustbase")
library("flowCore")
q()
library("flowCore")
source("https://bioconductor.org/biocLite.R")
biocLite("flowCore")
library("flowCore")
install.packages("robustbase")
library("flowCore")
library("pcaPP")
install.packages("pcaPP")
install.packages("pcaPP")
library("flowCore")
install.packages("Rcpp")
library("flowCore")
library("flowCore")
install.packages("Rcpp")
Sys.getenv("R_LIBS_USER")
install.packages("pcman")
library(flowCore)
source("http://bioconducor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore")
q()
library(haven)
Akomea_AD_23_06_2018_MasterSTA_updated_John_vr2_2 <- read_sav("#Off_Rec/Editorial work-KNUST/Akomea HND/dATA ENTRY AND ANALYSIS/Akomea_AD-23-06-2018_MasterSTA_updated -John-vr2_2.sav")
View(Akomea_AD_23_06_2018_MasterSTA_updated_John_vr2_2)
clear
install.packages("tidyverse")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("ggplot2movies", lib.loc="~/R/win-library/3.5")
library("ggrepel", lib.loc="~/R/win-library/3.5")
library("hrbrthemes", lib.loc="~/R/win-library/3.5")
library("jrGgplot2", lib.loc="~/R/win-library/3.5")
library("plotly")
library("hrbrthemes")
library("ggplot2")
data(movies, package = "ggplot2movies")
g = ggplot(movies, aes(x=length)) + xlim(0, 200) +
geom_histogram(aes(y=..density..), binwidth=3)
g
movies$decade = round(movies$year/10) * 10
ggplot(movies, aes(x = length)) + geom_histogram() +
facet_wrap( ~ decade, ncol=6) + xlim(0, 200)
library("ggridges")
install.packages("ggridges")
library("ggridges")
ggplot(movies,
aes(x = length, y = year,
group = year, height = ..density..)) +
geom_density_ridges(scale = 10, alpha = 0.7) +
theme_ridges(grid=FALSE) +
scale_x_log10(limits = c(1, 500),
breaks = c(1, 10, 100, 1000),
expand = c(0.01, 0)) +
scale_y_reverse(breaks = seq(2000, 1900, by = -20),
expand = c(0.01, 0))
ggplot(movies,
aes(x = length, y = year,
group = year, height = ..density..)) +
geom_density_ridges(scale = 10, alpha = 0.7)
ggplot(movies,
aes(x = length, y = year,
group = year, height = ..density..)) +
geom_density_ridges(scale = 10, alpha = 0.7)
+
theme_ridges(grid=FALSE)
ggplot(movies,
aes(x = length, y = year,
group = year, height = ..density..)) +
geom_density_ridges(scale = 10, alpha = 0.7) +
theme_ridges(grid=FALSE)
ggplot(movies,
aes(x = length, y = year,
group = year, height = ..density..)) +
geom_density_ridges(scale = 10, alpha = 0.7) +
theme_ridges(grid=FALSE) +
scale_x_log10(limits = c(1, 500),
breaks = c(1, 10, 100, 1000),
expand = c(0.01, 0))
ggplot(movies,
aes(x = length, y = year,
group = year, height = ..density..)) +
geom_density_ridges(scale = 10, alpha = 0.7) +
theme_ridges(grid=FALSE)
data(movies, package = "ggplot2movies")
data(movies, package = "ggplot2movies")
known_budget = movies[!is.na(movies), ]
h = ggplot(known_budget, aes(y = length)) + ylim(0, 500)
h1 = h + geom_point(aes(budget), alpha = 0.2)
h = ggplot(known_budget, aes(y = length)) + ylim(0, 500)
h1 = h + geom_point(aes(budget), alpha = 0.2)
h1
h2 = h + geom_point(aes(log10(budget)), alpha = 0.2)
h = ggplot(known_budget, aes(y = length)) + ylim(0, 500)
h1 = h + geom_point(aes(budget), alpha = 0.2)
h1
h2 = h + geom_point(aes(log10(budget)), alpha = 0.2)
scale_y_continuous(limits = c(0, 500))
h3 = h1 + scale_x_log10()
g = ggplot(bond, aes(x = Alcohol_Units, y = Kills)) +
geom_point(aes(colour = Actor))
library('ggrepel')
data(bond, package = "jrGgplot2")
ggplot(bond, aes(Kills, Alcohol_Units))+
geom_point() +
geom_text_repel(aes(label=Actor))
#we are going to show data for just Connery
gg2x = ggplot(bond[bond$Actor=="Connery",], aes(Kills, Alcohol_Units))+
geom_point() +
geom_text_repel(aes(label=Actor))
gg2x
#OR Just Connery visualization
just_connery = bond[bond$Actor=="Connery",]
ggplot(bond,aes(Kills,Alcohol_Units))+
geom_point()+
geom_text_repel(data = just_connery,
mapping = aes(x=Kills,
y=Alcohol_Units,
label=Actor),
colour="blue")
g = ggplot(bond, aes(x = Alcohol_Units, y = Kills)) +
geom_point(aes(colour = Actor))
g = ggplot(bond, aes(x = Alcohol_Units, y = Kills)) +
geom_point(aes(colour = Actor))
g
g = ggplot(bond, aes(x = Alcohol_Units, y = Kills)) +
geom_point(aes(colour = Actor))+
scale_colour_brewer(palette = "PuOr", type = "div")
g
library("grid")
library("grid")
library("gridExtra")
grid.arrange(g1, g2, g3, g4, nrow=2)
library("gridExtra")
grid.arrange(g1, g2, g3, g4, nrow=2)
g
library(hrbrthemes)
g
g + scale_color_ipsum()+theme_ipsum_rc()
pwd
getwd()
setwd("C:/Users/ST-AHUNO/Desktop")
getwd()
ls
dir
system("ls")
system("pwd")
ped
pwd
system("ls")
system("pwd")
getwd()
setwd(~)
XX1 = runif(20, 0.6,6.3)
xx1
XX1
clear()
XX2 = runif(20, 1.2,6.3)
XX2
clr
clr()
screenclear
x3 = runif(100,1.0,6.3)
x3
x4 = as.data.frame(x3)
View(x4)
install.packages("RISmed")
library(RISmed)
res <- EUtilsSummary("immunology AND Ghana", type="esearch", db="pubmed", datetype='pdat', mindate=2000, maxdate=2015, retmax=500)
View(res)
QueryCount(res)
t<-ArticleTitle(EUtilsGet(res))
head(t)
res@querytranslation
installed.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
clear
clear()
getwd()
read.csv(mydata.csv)
mkdir courseraR
dir.create(courseraR)
dir.create(.)
dir.create(..)
dir.create(".")
dir.create("./CourseaR")
dir.create("./CourseraR")
ls
setwd("./CourseraR")
getwd()
file.create("firstR.R")
list.files()
file.exist("firstR.R")
file.exists("firstR.R")
ls
list.files()
file.remove("firstR.R")
list.files()
source("filesNdirectories.R")
source("filesNdirectories.R")
source("filesNdirectories.R")
source("filesNdirectories.R")
source("filesNdirectories.R")
list.files()
getwd()
setwd("../")
list.files()
